<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
namespace Linx.Jsxn.TypeSystem
{
    using System.Collections.Generic;

<#
    var types = new[] 
    {
        new { Name = "bool", Prefix = "Boolean" },
        new { Name = "int", Prefix = "Int" },
        new { Name = "long", Prefix = "Long" },
        new { Name = "float", Prefix = "Float" },
        new { Name = "double", Prefix = "Double" },
        new { Name = "decimal", Prefix = "Decimal" },
        new { Name = "string", Prefix = "String" },
        new { Name = "guid", Prefix = "Guid" },
        new { Name = "dt", Prefix = "DateTime" },
        new { Name = "dto", Prefix = "DateTimeOffset" },
        new { Name = "ts", Prefix = "TimeSpan" },
        new { Name = "binary", Prefix = "Binary" },
    };
#>
    /// <summary>
    /// Base class for all primitive types.
    /// </summary>
    public abstract class PrimitiveType : NonNullableType, INamedType
    {
        /// <summary>
        /// Gets the predefined <see cref="PrimitiveType"/>s.
        /// </summary>
        public static IList<PrimitiveType> Predefined { get; } = new List<PrimitiveType>
        {
<# foreach(var t in types) { #>
            <#= t.Prefix #>Type.Instance,
<# } #>
        }.AsReadOnly();

        /// <summary>
        /// The name.
        /// </summary>
        public Identifier Name { get; }

        internal PrimitiveType(Identifier name) => Name = name;

        /// <summary>
        /// <see cref="Name"/>.
        /// </summary>
        public sealed override string ToString() => Name;
    }

<# foreach(var t in types) { #>
    /// <summary>
    /// "<#= t.Name #>" type.
    /// </summary>
    public sealed class <#= t.Prefix #>Type : PrimitiveType
    {
        /// <summary>
        /// Singleton.
        /// </summary>
        public static <#= t.Prefix #>Type Instance = new <#= t.Prefix #>Type();
        private <#= t.Prefix #>Type() : base((Identifier)"<#= t.Name #>") { }
    }

<# } #>
}