<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
    var types = new[] 
    {
        new { Name = "bool", Prefix = "Boolean" },
        new { Name = "int", Prefix = "Int32" },
        new { Name = "long", Prefix = "Int64" },
        new { Name = "float", Prefix = "Single" },
        new { Name = "double", Prefix = "Double" },
        new { Name = "decimal", Prefix = "Decimal" },
        new { Name = "string", Prefix = "String" },
        new { Name = "guid", Prefix = "Guid" },
        new { Name = "dt", Prefix = "DateTime" },
        new { Name = "dto", Prefix = "DateTimeOffset" },
        new { Name = "ts", Prefix = "TimeSpan" },
        new { Name = "binary", Prefix = "Binary" }
    };
#>
namespace Linx.Jsxn.Schema
{
    using System.Collections.Generic;

    /// <summary>
    /// A predefined primitive type.
    /// </summary>
    public sealed class PrimitiveType : NamedType
    {
<# foreach(var t in types) { #>
        /// <summary>
        /// "<#= t.Name #>" primitive type.
        /// </summary>
        public static PrimitiveType <#= t.Prefix #> { get; } = new PrimitiveType((Identifier) "<#= t.Name #>");

<# } #>
        /// <summary>
        /// Gets all predefined primitive types.
        /// </summary>
        public static IEnumerable<PrimitiveType> Defined { get; } = EnumerateAll();

        private static IEnumerable<PrimitiveType> EnumerateAll()
        {
<# foreach(var t in types) { #>
            yield return <#= t.Prefix #>;
<# } #>
        }

        /// <inheritdoc />
        public override Identifier Name { get; }

        private PrimitiveType(Identifier name) => Name = name;
    }
}
