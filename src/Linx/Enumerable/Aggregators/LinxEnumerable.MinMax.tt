<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#
    var minMax=new[]
    {
        new { Op = "Min", Op1 = "min", Cmp = "<", InvCmp = ">" },
        new { Op = "Max", Op1 = "max", Cmp = ">", InvCmp = "<" }
    };
#>
namespace Linx.Enumerable
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    partial class LinxEnumerable
    {
<# foreach(var mm in minMax) { #>
        /// <summary>
        /// Returns the <#= mm.Op1 #>imum element of a sequence, or a default value.
        /// </summary>
        public static T? <#= mm.Op #>OrNull<T>(this IEnumerable<T> source, IComparer<T> comparer = null) where T : struct
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (comparer == null) comparer = Comparer<T>.Default;

            // ReSharper disable once GenericEnumeratorNotDisposed
            using var e = source.GetEnumerator();
            if (!e.MoveNext()) return default;
            var <#= mm.Op1 #> = e.Current;
            while (e.MoveNext())
            {
                var current = e.Current;
                if (comparer.Compare(current, <#= mm.Op1 #>) <#= mm.Cmp #> 0) <#= mm.Op1 #> = current;
            }
            return <#= mm.Op1 #>;
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum element of a projection of a sequence, or a default value.
        /// </summary>
        public static TResult? <#= mm.Op #>OrNull<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector, IComparer<TResult> comparer = null) where TResult : struct
            => source.Select(selector).<#= mm.Op #>OrNull(comparer);

        /// <summary>
        /// Returns the elements of a sequence witch have the <#= mm.Op1 #>imum non-null key.
        /// </summary>
        public static IList<TSource> <#= mm.Op #>By<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer = null)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (keySelector == null) throw new ArgumentNullException(nameof(keySelector));
            if (comparer == null) comparer = Comparer<TKey>.Default;

            TKey <#= mm.Op1 #> = default;
            var result = new List<TSource>();
            foreach (var element in source)
            {
                var key = keySelector(element);
                if (key == null) continue;
                if (result.Count == 0)
                    <#= mm.Op1 #> = key;
                else
                {
                    var cmp = comparer.Compare(key, <#= mm.Op1 #>);
                    if (cmp <#= mm.InvCmp #> 0) continue;
                    <#= mm.Op1 #> = key;
                    if (cmp <#= mm.Cmp #> 0) result.Clear();
                }
                result.Add(element);
            }
            return result;
        }

<# } #>
    }
}