<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#
    var minMax=new[]
    {
        new { Op = "Min", Op1 = "min", Cmp = "<" },
        new { Op = "Max", Op1 = "max", Cmp = ">" }
    };
#>
namespace Linx.Reactive
{
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    partial class LinxReactive
    {
<# foreach(var mm in minMax) { #>
        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a sequence.
        /// </summary>
        /// <exception cref="InvalidOperationException">Sequence contains no non-null elements.</exception>
        public static async Task<T> <#= mm.Op #><T>(this IAsyncEnumerable<T> source, IComparer<T> comparer, CancellationToken token)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (comparer == null) comparer = Comparer<T>.Default;

            token.ThrowIfCancellationRequested();
            var ae = source.Where(x => x != null).GetAsyncEnumerator(token);
            try
            {
                if (!await ae.MoveNextAsync()) throw new InvalidOperationException(Strings.SequenceContainsNoElement);
                var <#= mm.Op1 #> = ae.Current;

                while (await ae.MoveNextAsync())
                {
                    var current = ae.Current;
                    if (comparer.Compare(current, <#= mm.Op1 #>) <#= mm.Cmp #> 0) <#= mm.Op1 #> = current;
                }

                return <#= mm.Op1 #>;
            }
            finally { await ae.DisposeAsync().ConfigureAwait(false); }
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a sequence.
        /// </summary>
        /// <exception cref="InvalidOperationException">Sequence contains no non-null elements.</exception>
        public static async Task<T> <#= mm.Op #><T>(this IAsyncEnumerable<T> source, CancellationToken token)
            => await source.<#= mm.Op #>(null, token).ConfigureAwait(false);

        /// <summary>
        /// Invokes a transform function on each element of a sequence and returns the <#= mm.Op1 #>imum non-null element.
        /// </summary>
        /// <exception cref="InvalidOperationException">Sequence contains no non-null elements.</exception>
        public static async Task<TResult> <#= mm.Op #><TSource, TResult>(this IAsyncEnumerable<TSource> source, Func<TSource, TResult> selector, CancellationToken token)
            => await source.Select(selector).<#= mm.Op #>(null, token).ConfigureAwait(false);

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a sequence, or a default value if the sequence contains no non-null elements.
        /// </summary>
        public static async Task<T> <#= mm.Op #>OrDefault<T>(this IAsyncEnumerable<T> source, IComparer<T> comparer, CancellationToken token)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (comparer == null) comparer = Comparer<T>.Default;

            token.ThrowIfCancellationRequested();
            var ae = source.Where(x => x != null).GetAsyncEnumerator(token);
            try
            {
                if (!await ae.MoveNextAsync()) return default;
                var <#= mm.Op1 #> = ae.Current;

                while (await ae.MoveNextAsync())
                {
                    var current = ae.Current;
                    if (comparer.Compare(current, <#= mm.Op1 #>) <#= mm.Cmp #> 0) <#= mm.Op1 #> = current;
                }

                return <#= mm.Op1 #>;
            }
            finally { await ae.DisposeAsync().ConfigureAwait(false); }
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a sequence, or a default value if the sequence contains no non-null elements.
        /// </summary>
        public static async Task<T> <#= mm.Op #>OrDefault<T>(this IAsyncEnumerable<T> source, CancellationToken token)
            => await source.<#= mm.Op #>OrDefault(null, token).ConfigureAwait(false);

        /// <summary>
        /// Invokes a transform function on each element of a sequence and returns the <#= mm.Op1 #>imum element, or a default value if the sequence contains no non-null elements.
        /// </summary>
        public static async Task<TResult> <#= mm.Op #>OrDefault<TSource, TResult>(this IAsyncEnumerable<TSource> source, Func<TSource, TResult> selector, CancellationToken token)
            => await source.Select(selector).<#= mm.Op #>OrDefault(null, token).ConfigureAwait(false);

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum element of a sequence, or null if the sequence contains no elements.
        /// </summary>
        public static async Task<T?> <#= mm.Op #>OrNull<T>(this IAsyncEnumerable<T> source, IComparer<T> comparer, CancellationToken token) where T : struct
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (comparer == null) comparer = Comparer<T>.Default;

            token.ThrowIfCancellationRequested();
            var ae = source.GetAsyncEnumerator(token);
            try
            {
                if (!await ae.MoveNextAsync()) return default;
                var <#= mm.Op1 #> = ae.Current;

                while (await ae.MoveNextAsync())
                {
                    var current = ae.Current;
                    if (comparer.Compare(current, <#= mm.Op1 #>) <#= mm.Cmp #> 0) <#= mm.Op1 #> = current;
                }

                return <#= mm.Op1 #>;
            }
            finally { await ae.DisposeAsync().ConfigureAwait(false); }
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum element of a sequence, or null if the sequence contains no elements.
        /// </summary>
        public static async Task<T?> <#= mm.Op #>OrNull<T>(this IAsyncEnumerable<T> source, CancellationToken token) where T : struct
            => await source.<#= mm.Op #>OrNull(null, token).ConfigureAwait(false);

        /// <summary>
        /// Invokes a transform function on each element of a sequence and returns the <#= mm.Op1 #>imum element, or null if the sequence contains no elements.
        /// </summary>
        public static async Task<TResult?> <#= mm.Op #>OrNull<TSource, TResult>(this IAsyncEnumerable<TSource> source, Func<TSource, TResult> selector, CancellationToken token) where TResult : struct
            => await source.Select(selector).<#= mm.Op #>OrNull(null, token).ConfigureAwait(false);

<# } #>
    }
}