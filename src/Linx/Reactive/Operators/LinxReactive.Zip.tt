<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    const int min = 2;
    const int max = 8;
    var args = Enumerable.Range(min, max - min + 1)
        .Select(i => new
        {
            N = i,
            Names = Enumerable.Range(1, i)
                .Select(j => new
                {
                    Index = j - 1,
                    GenArg = "T" + j,
                    Source = "source" + j,
                    Ae = "_ae" + j
                })
                .ToList()
        })
        .Select(i => new 
        {
            i.N,
            i.Names,
            GenArgList = $"<{ string.Join(", ", i.Names.Select(n => n.GenArg)) }, TResult>"
        });
#>
namespace Linx.Reactive
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Threading.Tasks.Sources;

    partial class LinxReactive
    {
<#
    foreach(var arg in args)
    {
#>
        /// <summary>
        /// Merges sequences into one sequence by combining corresponding elements.
        /// </summary>
        public static IAsyncEnumerable<TResult> Zip<#= arg.GenArgList #>(this
<#
    foreach(var n in arg.Names)
    {
#>
            IAsyncEnumerable<<#= n.GenArg #>> <#= n.Source #>,
<#
    }
#>
            Func<#= arg.GenArgList #> resultSelector)
            => new ZipEnumerable<#= arg.GenArgList #>(<#= string.Join(", ", arg.Names.Select(n => n.Source)) #>, resultSelector);

        private sealed class ZipEnumerable<#= arg.GenArgList #> : IAsyncEnumerable<TResult>
        {
<#
    foreach(var n in arg.Names)
    {
#>
            private readonly IAsyncEnumerable<<#= n.GenArg #>> _<#= n.Source #>;
<#
    }
#>
            private readonly Func<#= arg.GenArgList #> _resultSelector;

            public ZipEnumerable(
<#
    foreach(var n in arg.Names)
    {
#>
                IAsyncEnumerable<<#= n.GenArg #>> <#= n.Source #>,
<#
    }
#>
                Func<#= arg.GenArgList #> resultSelector)
            {
<#
    foreach(var n in arg.Names)
    {
#>
                _<#= n.Source #> = <#= n.Source #> ?? throw new ArgumentNullException(nameof(<#= n.Source #>));
<#
    }
#>
                _resultSelector = resultSelector ?? throw new ArgumentNullException(nameof(resultSelector));
            }

            public IAsyncEnumerator<TResult> GetAsyncEnumerator(CancellationToken token) => new Enumerator(this, token);

            private sealed class Enumerator : IAsyncEnumerator<TResult>
            {
                private const int _n = <#= arg.N #>;

                private const int _sInitial = 0;
                private const int _sPulling = 1;
                private const int _sPushing = 2;
                private const int _sCanceling = 3;
                private const int _sCancelingPulling = 4;
                private const int _sFinal = 5;

                private readonly ZipEnumerable<#= arg.GenArgList #> _enumerable;
                private ErrorHandler _eh = ErrorHandler.Init();
                private AsyncTaskMethodBuilder _atmbDisposed = default;
                private readonly ManualResetValueTaskSource<bool> _vtsMoveNext = new ManualResetValueTaskSource<bool>();
                private int _active;
<#
    foreach(var n in arg.Names)
    {
#>
                private ConfiguredCancelableAsyncEnumerable<<#= n.GenArg #>>.Enumerator <#= n.Ae #>;
<#
    }
#>
                private readonly ManualResetValueTaskSource[] _vtssPushing = new ManualResetValueTaskSource[_n];
                private uint _vtssPushingMask;
                private int _state;

                public Enumerator(ZipEnumerable<#= arg.GenArgList #> enumerable, CancellationToken token)
                {
                    _enumerable = enumerable;
                    if (token.CanBeCanceled) _eh.ExternalRegistration = token.Register(() => Cancel(new OperationCanceledException(token)));
                }

                public TResult Current { get; private set; }

                public ValueTask<bool> MoveNextAsync()
                {
                    _vtsMoveNext.Reset();

                    var state = Atomic.Lock(ref _state);
                    switch (state)
                    {
                        case _sInitial:
                            _active = _n;
                            _state = _sPulling;
<#
    foreach(var n in arg.Names)
    {
#>
                            Produce(_enumerable._<#= n.Source #>, <#= n.Index #>, (e, ae) => e.<#= n.Ae #> = ae);
<#
    }
#>
                            break;
                        case _sPushing:
                            Debug.Assert(_vtssPushingMask == (1U << _n) - 1);
                            _vtssPushingMask = 0;
                            _state = _sPulling;
                            foreach (var ccs in _vtssPushing)
                                ccs.SetResult();
                            break;
                        case _sCanceling:
                            _state = _sCancelingPulling;
                            break;
                        case _sFinal:
                            _state = _sFinal;
                            Current = default;
                            _eh.SetResultOrError(_vtsMoveNext, false);
                            break;
                        default: // Pulling, CancelingPulling
                            _state = state;
                            _vtsMoveNext.SetException(new Exception(state + "???"));
                            break;
                    }

                    return _vtsMoveNext.Task;
                }

                public ValueTask DisposeAsync()
                {
                    Cancel(ErrorHandler.EnumeratorDisposedException);
                    return new ValueTask(_atmbDisposed.Task);
                }

                private void Cancel(Exception error)
                {
                    var state = Atomic.Lock(ref _state);
                    switch (state)
                    {
                        case _sInitial:
                            _eh.SetExternalError(error);
                            _state = _sFinal;
                            _eh.Cancel();
                            _atmbDisposed.SetResult();
                            break;

                        case _sPulling:
                        case _sPushing:
                            Debug.Assert(_active > 0);
                            var m = _vtssPushingMask;
                            _vtssPushingMask = 0;
                            _state = state == _sPulling ? _sCancelingPulling : _sCanceling;
                            _eh.Cancel();
                            if (m != 0)
                            {
                                var ex = new OperationCanceledException(_eh.InternalToken);
                                foreach (var ccs in _vtssPushing.Where((x, i) => (m & (1U << i)) != 0))
                                    ccs.SetException(ex);
                            }
                            break;

                        case _sCanceling:
                        case _sCancelingPulling:
                        case _sFinal:
                            _state = state;
                            break;

                        default:
                            _state = state;
                            throw new Exception(state + "???");
                    }
                }

                private void OnCompleted(Exception error)
                {
                    var state = Atomic.Lock(ref _state);
                    switch (state)
                    {
                        case _sPulling:
                            Debug.Assert(_active > 0);
                            _eh.SetInternalError(error);
                            if (--_active == 0)
                            {
                                Debug.Assert(_vtssPushingMask == 0);
                                _state = _sFinal;
                                _eh.Cancel();
                                _atmbDisposed.SetResult();
                                _eh.SetResultOrError(_vtsMoveNext, false);
                            }
                            else
                            {
                                var m = _vtssPushingMask;
                                _vtssPushingMask = 0;
                                _state = _sCancelingPulling;
                                _eh.Cancel();
                                if (m != 0)
                                {
                                    var ex = new OperationCanceledException(_eh.InternalToken);
                                    foreach (var ccs in _vtssPushing.Where((x, i) => (m & (1U << i)) != 0))
                                        ccs.SetException(ex);
                                }
                            }
                            break;

                        case _sCanceling:
                        case _sCancelingPulling:
                            Debug.Assert(_active > 0);
                            _eh.SetInternalError(error);
                            if (--_active == 0)
                            {
                                Debug.Assert(_vtssPushingMask == 0);
                                _state = _sFinal;
                                _atmbDisposed.SetResult();
                                if (state == _sCancelingPulling)
                                    _eh.SetResultOrError(_vtsMoveNext, false);
                            }
                            else
                            {
                                var m = _vtssPushingMask;
                                _vtssPushingMask = 0;
                                _state = state;
                                if (m != 0)
                                {
                                    var ex = new OperationCanceledException(_eh.InternalToken);
                                    foreach (var ccs in _vtssPushing.Where((x, i) => (m & (1U << i)) != 0))
                                        ccs.SetException(ex);
                                }
                            }
                            break;

                        default: // Initial, Pushing, Final???
                            _state = state;
                            throw new Exception(state + "???");
                    }
                }

                private async void Produce<T>(IAsyncEnumerable<T> source, int index, Action<Enumerator, ConfiguredCancelableAsyncEnumerable<T>.Enumerator> setEnumerator)
                {
                    Exception error;
                    try
                    {
                        _eh.InternalToken.ThrowIfCancellationRequested();

                        var ccsPushing = _vtssPushing[index] = new ManualResetValueTaskSource();
                        var flag = 1U << index;
                        var ae = source.WithCancellation(_eh.InternalToken).ConfigureAwait(false).GetAsyncEnumerator();
                        try
                        {
                            setEnumerator(this, ae);

                            while (await ae.MoveNextAsync())
                            {
                                var state = Atomic.Lock(ref _state);
                                switch (state)
                                {
                                    case _sPulling:
                                        ccsPushing.Reset();
                                        _vtssPushingMask |= flag;
                                        if (_vtssPushingMask == (1U << _n) - 1)
                                        {
                                            try { Current = _enumerable._resultSelector(<#= string.Join(", ", arg.Names.Select(n => n.Ae + ".Current")) #>); }
                                            catch
                                            {
                                                _vtssPushingMask &= ~flag;
                                                _state = _sPulling;
                                                throw;
                                            }
                                            _state = _sPushing;
                                            _vtsMoveNext.SetResult(true);
                                        }
                                        else
                                            _state = _sPulling;
                                        await ccsPushing.Task;
                                        _eh.InternalToken.ThrowIfCancellationRequested();
                                        break;

                                    case _sCanceling:
                                    case _sCancelingPulling:
                                        _state = state;
                                        throw new OperationCanceledException(_eh.InternalToken);

                                    default: // Initial, Pushing, Final???
                                        _state = state;
                                        throw new Exception(state + "???");
                                }
                            }
                        }
                        finally { await ae.DisposeAsync(); }
                        error = null;
                    }
                    catch (Exception ex) { error = ex; }

                    OnCompleted(error);
                }
            }
        }

<#
    }
#>
    }
}
