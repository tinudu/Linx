<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#
    var minMax=new[]
    {
        new { Op = "Min", Op1 = "min", Cmp = "<", InvCmp = ">" },
        new { Op = "Max", Op1 = "max", Cmp = ">", InvCmp = "<" }
    };
#>
namespace Linx.AsyncEnumerable
{
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    partial class LinxAsyncEnumerable
    {
<# foreach(var mm in minMax) { #>
        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a sequence.
        /// </summary>
        /// <exception cref="InvalidOperationException">Sequence contains no non-null elements.</exception>
        public static async Task<T> <#= mm.Op #><T>(this IAsyncEnumerable<T> source, CancellationToken token, IComparer<T> comparer = null)
        {
            var maybe = await source.<#= mm.Op #>Maybe(token, comparer);
            return maybe.HasValue ? maybe.GetValueOrDefault() : throw new InvalidOperationException(Strings.SequenceContainsNoElement);
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a projection of a sequence.
        /// </summary>
        /// <exception cref="InvalidOperationException">Sequence contains no non-null elements.</exception>
        public static async Task<TResult> <#= mm.Op #><TSource, TResult>(this IAsyncEnumerable<TSource> source, Func<TSource, TResult> selector, CancellationToken token, IComparer<TResult> comparer = null)
            => await source.Select(selector).<#= mm.Op #>(token, comparer).ConfigureAwait(false);

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a sequence, if any.
        /// </summary>
        public static async Task<Maybe<T>> <#= mm.Op #>Maybe<T>(this IAsyncEnumerable<T> source, CancellationToken token, IComparer<T> comparer = null)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (comparer == null) comparer = Comparer<T>.Default;
            token.ThrowIfCancellationRequested();

            var ae = source.Where(x => x != null).WithCancellation(token).ConfigureAwait(false).GetAsyncEnumerator();
            try
            {
                if (!await ae.MoveNextAsync()) return default;
                var <#= mm.Op1 #> = ae.Current;

                while (await ae.MoveNextAsync())
                {
                    var current = ae.Current;
                    if (comparer.Compare(current, <#= mm.Op1 #>) <#= mm.Cmp #> 0) <#= mm.Op1 #> = current;
                }

                return <#= mm.Op1 #>;
            }
            finally { await ae.DisposeAsync(); }
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a projection of a sequence, if any.
        /// </summary>
        public static async Task<Maybe<TResult>> <#= mm.Op #>Maybe<TSource, TResult>(this IAsyncEnumerable<TSource> source, Func<TSource, TResult> selector, CancellationToken token, IComparer<TResult> comparer = null)
            => await source.Select(selector).<#= mm.Op #>Maybe(token, comparer).ConfigureAwait(false);

        /// <summary>
        /// Returns the elements of a sequence with the <#= mm.Op1 #>imum non-null key.
        /// </summary>
        public static async Task<IList<TSource>> <#= mm.Op #>By<TSource, TKey>(this IAsyncEnumerable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken token, IComparer<TKey> comparer = null)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (keySelector == null) throw new ArgumentNullException(nameof(keySelector));
            if (comparer == null) comparer = Comparer<TKey>.Default;
            token.ThrowIfCancellationRequested();

            var ae = source.WithCancellation(token).ConfigureAwait(false).GetAsyncEnumerator();
            try
            {
                TKey <#= mm.Op1 #> = default;
                var result = new List<TSource>();
                while (await ae.MoveNextAsync())
                {
                    var current = ae.Current;
                    var key = keySelector(current);
                    if (key == null) continue;
                    if (result.Count == 0)
                    {
                        <#= mm.Op1 #> = key;
                        result.Add(current);
                    }
                    else
                    {
                        var cmp = comparer.Compare(key, <#= mm.Op1 #>);
                        if (cmp <#= mm.InvCmp #> 0) continue;
                        <#= mm.Op1 #> = key;
                        if (cmp <#= mm.Cmp #> 0) result.Clear();
                        result.Add(current);
                    }
                }
                return result;
            }
            finally { await ae.DisposeAsync(); }
        }

        /// <summary>
        /// Returns the elements of a sequence witch have the <#= mm.Op1 #>imum non-null key.
        /// </summary>
        public static async Task<IList<TSource>> <#= mm.Op #>By<TSource, TKey>(this IAsyncEnumerable<TSource> source, Func<TSource, Maybe<TKey>> maybeKeySelector, CancellationToken token, IComparer<TKey> comparer = null)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (maybeKeySelector == null) throw new ArgumentNullException(nameof(maybeKeySelector));
            if (comparer == null) comparer = Comparer<TKey>.Default;
            token.ThrowIfCancellationRequested();

            var ae = source.WithCancellation(token).ConfigureAwait(false).GetAsyncEnumerator();
            try
            {
                TKey <#= mm.Op1 #> = default;
                var result = new List<TSource>();
                while (await ae.MoveNextAsync())
                {
                    var current = ae.Current;
                    var maybeKey = maybeKeySelector(current);
                    if (!maybeKey.HasValue) continue;
                    var key = maybeKey.GetValueOrDefault();
                    if (key == null) continue;
                    if (result.Count == 0)
                        <#= mm.Op1 #> = key;
                    else
                    {
                        var cmp = comparer.Compare(key, <#= mm.Op1 #>);
                        if (cmp <#= mm.InvCmp #> 0) continue;
                        <#= mm.Op1 #> = key;
                        if (cmp <#= mm.Cmp #> 0) result.Clear();
                    }
                    result.Add(current);
                }
                return result;
            }
            finally { await ae.DisposeAsync(); }
        }

<# } #>
    }
}