<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#
    var minMax=new[]
    {
        new { Op = "Min", Op1 = "min", Cmp = "<", InvCmp = ">" },
        new { Op = "Max", Op1 = "max", Cmp = ">", InvCmp = "<" }
    };
#>
namespace Linx.AsyncEnumerable
{
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    partial class LinxAsyncEnumerable
    {
<# foreach(var mm in minMax) { #>
        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a sequence.
        /// </summary>
        /// <exception cref="InvalidOperationException">Sequence contains no non-null elements.</exception>
        public static async Task<T> <#= mm.Op #><T>(this IAsyncEnumerable<T> source, CancellationToken token, IComparer<T>? comparer = null)
        {
            var (b, v) = await source.<#= mm.Op #>Maybe(token, comparer).ConfigureAwait(false);
            return b ? v : throw new InvalidOperationException(Strings.SequenceContainsNoElement);
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a projection of a sequence.
        /// </summary>
        /// <exception cref="InvalidOperationException">Sequence contains no non-null elements.</exception>
        public static async Task<TResult> <#= mm.Op #><TSource, TResult>(this IAsyncEnumerable<TSource> source, Func<TSource, TResult> selector, CancellationToken token, IComparer<TResult>? comparer = null)
        {
            var (b, v) = await source.Select(selector).<#= mm.Op #>Maybe(token, comparer).ConfigureAwait(false);
            return b ? v : throw new InvalidOperationException(Strings.SequenceContainsNoElement);
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a sequence, or a default value.
        /// </summary>
        public static async Task<T> <#= mm.Op #>OrDefault<T>(this IAsyncEnumerable<T> source, CancellationToken token, IComparer<T>? comparer = null)
        {
            return (await source.<#= mm.Op #>Maybe(token, comparer).ConfigureAwait(false)).Value;
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum non-null element of a projection of a sequence, or a default value.
        /// </summary>
        public static async Task<TResult> <#= mm.Op #>OrDefault<TSource, TResult>(this IAsyncEnumerable<TSource> source, Func<TSource, TResult> selector, CancellationToken token, IComparer<TResult>? comparer = null)
        {
            return (await source.Select(selector).<#= mm.Op #>Maybe(token, comparer).ConfigureAwait(false)).Value;
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum element of a sequence, or a default value.
        /// </summary>
        public static async Task<T?> <#= mm.Op #>OrNull<T>(this IAsyncEnumerable<T> source, CancellationToken token, IComparer<T>? comparer = null) where T : struct
        {
            var (b, v) = await source.<#= mm.Op #>Maybe(token, comparer).ConfigureAwait(false);
            return b ? v : default(T?);
        }

        /// <summary>
        /// Returns the <#= mm.Op1 #>imum element of a projection of a sequence, or a default value.
        /// </summary>
        public static async Task<TResult?> <#= mm.Op #>OrNull<TSource, TResult>(this IAsyncEnumerable<TSource> source, Func<TSource, TResult> selector, CancellationToken token, IComparer<TResult>? comparer = null) where TResult : struct
        {
            var (b, v) = await source.Select(selector).<#= mm.Op #>Maybe(token, comparer).ConfigureAwait(false);
            return b ? v : default(TResult?);
        }

        /// <summary>
        /// Returns the elements of a sequence with the <#= mm.Op1 #>imum non-null key.
        /// </summary>
        public static async Task<IList<TSource>> <#= mm.Op #>By<TSource, TKey>(this IAsyncEnumerable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken token, IComparer<TKey>? comparer = null)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (keySelector == null) throw new ArgumentNullException(nameof(keySelector));
            if (comparer == null) comparer = Comparer<TKey>.Default;
            token.ThrowIfCancellationRequested();

            await using var ae = source.Select(x => (key: keySelector(x), value: x)).Where(x => x.key is not null).WithCancellation(token).ConfigureAwait(false).GetAsyncEnumerator();
            if (!await ae.MoveNextAsync())
                return Array.Empty<TSource>();
            var item = ae.Current;
            var <#= mm.Op1 #> = item.key;
            var result = new List<TSource> { item.value };
            while (await ae.MoveNextAsync())
            {
                item = ae.Current;
                var cmp = comparer.Compare(item.key, <#= mm.Op1 #>);
                if (cmp <#= mm.InvCmp #> 0)
                    continue;
                if (cmp <#= mm.Cmp #> 0)
                {
                    <#= mm.Op1 #> = item.key;
                    result.Clear();
                }
                result.Add(item.value);
            }
            return result;
        }

        private static async Task<(bool HasValue, T Value)> <#= mm.Op #>Maybe<T>(this IAsyncEnumerable<T> source, CancellationToken token, IComparer<T>? comparer = null)
        {
            if (comparer == null) comparer = Comparer<T>.Default;
            token.ThrowIfCancellationRequested();

            await using var ae = source.Where(x => x is not null).WithCancellation(token).ConfigureAwait(false).GetAsyncEnumerator();
            if (!await ae.MoveNextAsync()) return default;
            var <#= mm.Op1 #> = ae.Current;
            while (await ae.MoveNextAsync())
            {
                var current = ae.Current;
                if (comparer.Compare(current, <#= mm.Op1 #>) <#= mm.Cmp #> 0) <#= mm.Op1 #> = current;
            }
            return (true, <#= mm.Op1 #>);
        }

<# } #>
    }
}