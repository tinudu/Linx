<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
    const int min = 2;
    const int max = 8;
#>
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Linx.AsyncEnumerable;

partial class LinxAsyncEnumerable
{
<#
foreach(var n in Enumerable.Range(min, max - min + 1)) {
    var names = Enumerable.Range(1, n)
        .Select(i => new
        {
            GenArg = "TAggregate" + i,
            Aggregator = "aggregator" + i,
            Aggregate = "aggregate" + i
        })
        .ToList();
    var genArgs = string.Join(", ", names.Select(x => x.GenArg));
#>
    /// <summary>
    /// Build multiple aggregates in one enumeration.
    /// </summary>
    public static ValueTask<TResult> MultiAggregate<TSource, <#= genArgs #>, TResult>(this
        IAsyncEnumerable<TSource> source,
<# foreach(var x in names) { #>
        AggregatorDelegate<TSource, <#= x.GenArg #>> <#= x.Aggregator #>,
<# } #>
        Func<<#= genArgs #>, TResult> resultSelector,
        CancellationToken token)
        => source.Cold().MultiAggregate(<#= string.Join(", ", names.Select(x => x.Aggregator)) #>, resultSelector, token);

    /// <summary>
    /// Build multiple aggregates in one enumeration.
    /// </summary>
    public static ValueTask<TResult> MultiAggregate<TSource, <#= genArgs #>, TResult>(this
        IEnumerable<TSource> source,
<# foreach(var x in names) { #>
        AggregatorDelegate<TSource, <#= x.GenArg #>> <#= x.Aggregator #>,
<# } #>
        Func<<#= genArgs #>, TResult> resultSelector,
        CancellationToken token)
        => source.Cold().MultiAggregate(<#= string.Join(", ", names.Select(x => x.Aggregator)) #>, resultSelector, token);

<# } #>
}