<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#
    var types = new []
    {
        new { Type = "int", Zero = "0", Add = "checked { sum += ae.Current; }" },
        new { Type = "long", Zero = "0L", Add = "checked { sum += ae.Current; }" },
        new { Type = "double", Zero = "0D", Add = "sum += ae.Current;" },
        new { Type = "float", Zero = "0F", Add = "sum += ae.Current;" },
        new { Type = "decimal", Zero = "0M", Add = "sum += ae.Current;" }
    };
#>
namespace Linx.AsyncEnumerable
{
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    partial class LinxAsyncEnumerable
    {
<# foreach(var t in types) { #>
        /// <summary>
        /// Computes the sum of a sequence values.
        /// </summary>
        public static async Task<<#= t.Type #>> Sum(this IAsyncEnumerable<<#= t.Type #>> source, CancellationToken token)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));

            token.ThrowIfCancellationRequested();
            var ae = source.WithCancellation(token).ConfigureAwait(false).GetAsyncEnumerator();
            try
            {
                var sum = <#= t.Zero #>;
                while (await ae.MoveNextAsync())
                    <#= t.Add #>
                return sum;
            }
            finally { await ae.DisposeAsync(); }
        }

        /// <summary>
        /// Computes the sum of a sequence of non-null values.
        /// </summary>
        public static async Task<<#= t.Type #>> Sum(this IAsyncEnumerable<<#= t.Type #>?> source, CancellationToken token) => await source.Values().Sum(token);

        /// <summary>
        /// Computes the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.
        /// </summary>
        public static async Task<<#= t.Type #>> Sum<T>(this IAsyncEnumerable<T> source, Func<T, <#= t.Type #>> selector, CancellationToken token) => await source.Select(selector).Sum(token);

        /// <summary>
        /// Computes the sum of the sequence of non-null values that are obtained by invoking a transform function on each element of the input sequence.
        /// </summary>
        public static async Task<<#= t.Type #>> Sum<T>(this IAsyncEnumerable<T> source, Func<T, <#= t.Type #>?> selector, CancellationToken token) => await source.Select(selector).Values().Sum(token);

<# } #>
    }
}
