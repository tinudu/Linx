<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace Linx.AsyncEnumerable
{
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    partial class LinxAsyncEnumerable
    {
<# foreach (var op in new [] { "First", "Last", "Single" })
   {
        var lower = op.ToLowerInvariant();
        string ex1, ex2;
        if (op == "Single")
        {
            ex1 = "/// <exception cref=\"InvalidOperationException\">Sequence contains no or multiple elements.</exception>";
            ex2 = "/// <exception cref=\"InvalidOperationException\">Sequence contains multiple elements.</exception>";
        }
        else
        {
            ex1 = "/// <exception cref=\"InvalidOperationException\">Sequence contains no elements.</exception>";
            ex2 = null;
        }
#>
        /// <summary>
        /// Returns the <#= lower #> element of a sequence.
        /// </summary>
        <#= ex1 #>
        public static async Task<T> <#= op #><T>(this IAsyncEnumerable<T> source, CancellationToken token)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            var (b, v) = await source.<#= op #>Maybe(token).ConfigureAwait(false);
            return b ? v : throw new InvalidOperationException(Strings.SequenceContainsNoElement);
        }

        /// <summary>
        /// Returns the <#= lower #> element of a sequence that satisfies a condition.
        /// </summary>
        <#= ex1 #>
        public static async Task<T> <#= op #><T>(this IAsyncEnumerable<T> source, Func<T, bool> predicate, CancellationToken token)
        {
            var (b, v) = await source.Where(predicate).<#= op #>Maybe(token).ConfigureAwait(false);
            return b ? v : throw new InvalidOperationException(Strings.SequenceContainsNoElement);
        }

        /// <summary>
        /// Returns the <#= lower #> element of a sequence, or a default value.
        /// </summary>
<# if( ex2 != null) { #>
        <#= ex2 #>
<# } #>
        public static async Task<T> <#= op #>OrDefault<T>(this IAsyncEnumerable<T> source, CancellationToken token)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            return (await source.<#= op #>Maybe(token).ConfigureAwait(false)).Value;
        }

        /// <summary>
        /// Returns the <#= lower #> element of a sequence that satisfies a condition, or a default value.
        /// </summary>
<# if( ex2 != null) { #>
        <#= ex2 #>
<# } #>
        public static async Task<T> <#= op #>OrDefault<T>(this IAsyncEnumerable<T> source, Func<T, bool> predicate, CancellationToken token)
        {
            return (await source.Where(predicate).<#= op #>Maybe(token).ConfigureAwait(false)).Value;
        }

        /// <summary>
        /// Returns the <#= lower #> element of a sequence, or a default value.
        /// </summary>
<# if( ex2 != null) { #>
        <#= ex2 #>
<# } #>
        public static async Task<T?> <#= op #>OrNull<T>(this IAsyncEnumerable<T> source, CancellationToken token) where T : struct
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            var (b, v) = await source.<#= op #>Maybe(token).ConfigureAwait(false);
            return b ? v : default(T?);
        }

        /// <summary>
        /// Returns the <#= lower #> element of a sequence that satisfies a condition, or a default value.
        /// </summary>
<# if( ex2 != null) { #>
        <#= ex2 #>
<# } #>
        public static async Task<T?> <#= op #>OrNull<T>(this IAsyncEnumerable<T> source, Func<T, bool> predicate, CancellationToken token) where T : struct
        {
            var (b, v) = await source.Where(predicate).<#= op #>Maybe(token).ConfigureAwait(false);
            return b ? v : default(T?);
        }

<# } #>
        private static async Task<(bool HasValue, T Value)> FirstMaybe<T>(this IAsyncEnumerable<T> source, CancellationToken token)
        {
            token.ThrowIfCancellationRequested();
            await using var ae = source.WithCancellation(token).ConfigureAwait(false).GetAsyncEnumerator();
            return await ae.MoveNextAsync() ? (true, ae.Current) : default;
        }

        private static async Task<(bool HasValue, T Value)> LastMaybe<T>(this IAsyncEnumerable<T> source, CancellationToken token)
        {
            token.ThrowIfCancellationRequested();
            await using var ae = source.WithCancellation(token).ConfigureAwait(false).GetAsyncEnumerator();
            if (!await ae.MoveNextAsync()) return default;
            var last = ae.Current;
            while (await ae.MoveNextAsync()) last = ae.Current;
            return (true, last);
        }

        private static async Task<(bool HasValue, T Value)> SingleMaybe<T>(this IAsyncEnumerable<T> source, CancellationToken token)
        {
            token.ThrowIfCancellationRequested();
            await using var ae = source.WithCancellation(token).ConfigureAwait(false).GetAsyncEnumerator();
            if (!await ae.MoveNextAsync()) return default;
            var single = ae.Current;
            if (await ae.MoveNextAsync()) throw new InvalidOperationException(Strings.SequenceContainsMultipleElements);
            return (true, single);
        }
    }
}