<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
namespace Linx.AsyncEnumerable
{
    using System;
    using System.Collections.Generic;

    partial class LinxAsyncEnumerable
    {
<#
const int min = 2;
const int max = 7;
foreach(var n in Enumerable.Range(min, max - min + 1))
{
    var names = Enumerable.Range(1, n)
        .Select(i => new 
        {
            Index = i - 1,
            GenArg = "T" + i,
            Source = "source" + i,
            Value = "_value" + i,
            OnNext = "OnNext" + i
        })
        .ToList();
    var genArgs = string.Join(", ", names.Select(x => x.GenArg));
#>
        /// <summary>
        /// Merges differently typed sequences into a <see cref="ValueTuple{<#= genArgs #>}"/>.
        /// </summary>
        /// <remarks>
        /// <paramref name="startAtFirstElement"/> determines how the start of the sequence is handled.
        /// If it's false (the default), the operator only produces elements once all sources have produced their first element.
        /// If it's true, the sequence starts at the first element produced by any source,
        /// with default values for any source that has not yet produced a value.
        /// </remarks>
        public static IAsyncEnumerable<ValueTuple<<#= genArgs #>>> Combine<<#= genArgs #>>(this
<# foreach (var x in names) { #>
            IAsyncEnumerable<<#= x.GenArg #>> <#= x.Source #>,
<# } #>
            bool startAtFirstElement = false)
        {
<# foreach (var x in names) { #>
            if (<#= x.Source #> == null) throw new ArgumentNullException(nameof(<#= x.Source #>));
<# } #>

            return Defer(() =>
            {
                var tuple = new CombineTuple<<#= genArgs #>>(startAtFirstElement);
                return new[] 
                    {
<# foreach (var x in names) { #>
                        <#= x.Source #>.Select(v => tuple.<#= x.OnNext #>(v)),
<# } #>
                    }
                    .Merge()
                    .SkipUntil(t => t.HasValue)
                    .Select(t => t.GetValueOrDefault());
            });
        }

        private sealed class CombineTuple<<#= genArgs #>>
        {
            private int _missing;
<# foreach (var x in names) { #>
            private <#= x.GenArg #> <#= x.Value #>;
<# } #>

            public CombineTuple(bool startAtFirstElement)
            {
                if (!startAtFirstElement)
                    _missing = (1 << <#= n #>) - 1;
            }

<# foreach (var x in names) { #>
            public ValueTuple<<#= genArgs #>>? <#= x.OnNext #>(<#= x.GenArg #> value)
            {
                var missing = Atomic.Lock(ref _missing) & ~(1 << <#= x.Index #>);
                <#= x.Value #> = value;
                var result = missing == 0 ? new ValueTuple<<#= genArgs #>>(<#= string.Join(", ", names.Select(x => x.Value)) #>): default;
                _missing = missing;
                return result;
            }

<# } #>
        }

<# } #>
    }
}