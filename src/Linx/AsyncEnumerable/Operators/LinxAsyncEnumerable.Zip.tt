<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    const int min = 2;
    const int max = 8;
    var args = Enumerable.Range(min, max - min + 1)
        .Select(i => new
        {
            N = i,
            Names = Enumerable.Range(1, i)
                .Select(j => new
                {
                    GenArg = "T" + j,
                    Source = "source" + j,
                    Ae = "ae" + j
                })
                .ToList()
        })
        .Select(i => new 
        {
            i.N,
            i.Names,
            GenArgList = $"<{ string.Join(", ", i.Names.Select(n => n.GenArg)) }, TResult>"
        });
#>
namespace Linx.AsyncEnumerable
{
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    partial class LinxAsyncEnumerable
    {
<# foreach(var arg in args) { #>
        /// <summary>
        /// Merges multiple sequences into one sequence by combining corresponding elements.
        /// </summary>
        public static IAsyncEnumerable<TResult> Zip<#= arg.GenArgList #>(this
<# foreach(var n in arg.Names) { #>
            IAsyncEnumerable<<#= n.GenArg #>> <#= n.Source #>,
<# } #>
            Func<#= arg.GenArgList #> resultSelector)
        {
<# foreach(var n in arg.Names) { #>
            if (<#= n.Source #> == null) throw new ArgumentNullException(nameof(<#= n.Source #>));
<# } #>
            if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));

            return Create(GetEnumerator);

            async IAsyncEnumerator<TResult> GetEnumerator(CancellationToken token)
            {
                token.ThrowIfCancellationRequested();

                var cts = new LinxCancellationTokenSource();
                // ReSharper disable PossibleMultipleEnumeration
<# foreach(var n in arg.Names) { #>
                await using var <#= n.Ae #> = <#= n.Source #>.WithCancellation(cts.Token).ConfigureAwait(false).GetAsyncEnumerator();
<# } #>
                // ReSharper restore PossibleMultipleEnumeration
                var ctx = new ZipContext(cts, ae1.MoveNextAsync, ae2.MoveNextAsync);
                // ReSharper disable once UseAwaitUsing
                using (token.CanBeCanceled ? token.Register(() => ctx.SetError(new OperationCanceledException(token))) : default)
                    while (await ctx.MoveNextAsync().ConfigureAwait(false))
                        yield return resultSelector(<#= string.Join(", ", arg.Names.Select(n => n.Ae + ".Current")) #>);
            }
        }

<# } #>
    }
}
