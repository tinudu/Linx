<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    const int min = 2;
    const int max = 8;
    var args = Enumerable.Range(min, max - min + 1)
        .Select(i => new
        {
            N = i,
            Names = Enumerable.Range(1, i)
                .Select(j => new
                {
                    GenArg = "T" + j,
                    Source = "source" + j,
                    Producer = "_p" + j
                })
                .ToList()
        })
        .Select(i => new 
        {
            i.N,
            i.Names,
            GenArgList = $"<{ string.Join(", ", i.Names.Select(n => n.GenArg)) }, TResult>"
        });
#>
using System;
using System.Collections.Generic;

namespace Linx.AsyncEnumerable;

partial class LinxAsyncEnumerable
{
<# foreach(var arg in args) { #>
    /// <summary>
    /// Merges multiple sequences into one sequence by combining corresponding elements.
    /// </summary>
    public static IAsyncEnumerable<TResult> Zip<#= arg.GenArgList #>(this
<# foreach(var n in arg.Names) { #>
        IAsyncEnumerable<<#= n.GenArg #>> <#= n.Source #>,
<# } #>
        Func<#= arg.GenArgList #> resultSelector)
        => new ZipIterator<#= arg.GenArgList #>(
<# foreach(var n in arg.Names) { #>
            <#= n.Source #> ?? throw new ArgumentNullException(nameof(<#= n.Source #>)),
<# } #>
            resultSelector ?? throw new ArgumentNullException(nameof(resultSelector)));

<# } #>
<# foreach(var arg in args) { #>
    private sealed class ZipIterator<#= arg.GenArgList #> : ZipIteratorBase<TResult>
    {
<# foreach(var n in arg.Names) { #>
        private readonly Producer<<#= n.GenArg #>> <#= n.Producer #>;
<# } #>
        private readonly Func<#= arg.GenArgList #> _resultSelector;

        public ZipIterator(
<# foreach(var n in arg.Names) { #>
            IAsyncEnumerable<<#= n.GenArg #>> <#= n.Source #>,
<# } #>
            Func<#= arg.GenArgList #> resultSelector) : base(<#= arg.N #>)
        {
<# foreach(var n in arg.Names) { #>
            <#= n.Producer #> = new Producer<<#= n.GenArg #>>(<#= n.Source #>, this);
<# } #>
            _resultSelector = resultSelector;
        }

        protected override ZipIteratorBase<TResult> Clone() =>
            new ZipIterator<#= arg.GenArgList #>(
<# foreach(var n in arg.Names) { #>
                <#= n.Producer #>.Source,
<# } #>
                _resultSelector);

        protected override void PulseAll()
        {
<# foreach(var n in arg.Names) { #>
            <#= n.Producer #>.Pulse();
<# } #>
        }

        protected override TResult GetCurrent() => _resultSelector(<#= string.Join(", ", arg.Names.Select(n => $"{n.Producer}.GetCurrent()")) #>);
    }

<# } #>
}
